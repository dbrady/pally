#!/usr/bin/env ruby
require 'rubygems'
require 'yaml'
require 'trollop'
require 'ruport'
require 'rally_rest_api'

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'common.rb'))
# usage:
# pally [options] command <args>

opts = Trollop.options do
  opt :config, "Configuration file", :default => nil
  opt :username, "Username", :default => nil
  opt :password, "Password", :default => nil
  opt :project, "Project", :default => nil
  opt :iteration, "Iteration", :default => nil
  opt :dump, "dump", :type => :boolean, :default => false
end
args = ARGV.dup

# ----------------------------------------------------------------------
# Config file
if opts[:config]
  $config_file = opts[:config]
else 
  f1 = File.expand_path('~/.pally/pally.yml')
  f2 = File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'pally.yml'))
  $config_file = File.exist?(f1) ? f1 : f2
end
raise "Config file does not exist: #{opts[:config]}" unless File.exists? $config_file
$config = YAML::load_file $config_file

[:username, :password].each do |arg|
  $config['login'][arg.to_s] = opts[arg] if opts[arg]
end

# ----------------------------------------------------------------------
# Crap that shouldn't even be in here but what ya gonna do
def login(username, password)
  @rally = RallyRestAPI.new :username => username, :password => password
end

def listable?(type)
  RallyRestAPI::ALLOWED_TYPES.include? type
end

def card_type_for(card_id)
  case card_id[0..0]
  when "s" then :story
  when "t" then :task
  when "d" then :defect
  else
    puts "card id should be prefixed by s,t,d - depending on the type"
    exit 1
  end
end

COLUMN_HEADER_REMAPPINGS = {
  :project => "Project",
  :iteration => "Iteration",
  :formatted_i_d => "ID",
  :estimate => "Est",
  :actuals => "Act",
  :to_do => "ToDo",
  :state => "State",
  :name => "Name"
}

Ruport::Data::Table.class_eval do
  def pretty_columns!
    column_names.each do |column_name|
      if COLUMN_HEADER_REMAPPINGS[column_name.to_sym]
        rename_column(column_name.to_sym, COLUMN_HEADER_REMAPPINGS[column_name.to_sym])
      end
    end
  end
end

# ----------------------------------------------------------------------
# Parse out command
command = args.shift

case command.downcase
when 'actuals'
  card_id = args.shift
  actuals = args.shift
  login $config['login']['username'], $config['login']['password']
  card_type = card_type_for(card_id)
  card = @rally.find(card_type, :fetch => true) { equal :formatted_i_d, card_id}.first
  if (card_type == :story) || (card_type == :defect)
    tasks = @rally.find(:task, :fetch => true) { equal :work_product, card}
    if tasks.results.length > 1
      puts "There's more than one task for #{card_id}. You're going to have to specify which task you want"
    elsif tasks.results.length == 0
      puts "No tasks for #{card_id}. Creating default task"
      task = @rally.create(:task, :name => "complete #{card.formatted_i_d} - #{card.name}", :actuals => actuals, :work_product => card, :state => "In-Progress", :owner => $config['login']['username'])
      puts "Created default (in-progress) task #{task.formatted_i_d} and set actuals to #{task.actuals}"
    else
      task = tasks.first
      task.update(:actuals => actuals)
      puts "Updated #{card_id}'s task #{task.formatted_i_d} '#{task.name}' actuals to #{task.actuals}"
    end
  else
    card.update(:actuals => actuals)
    puts "Updated task #{card.formatted_i_d} actuals to #{card.actuals}"
  end
when 'disown'
  card_id = args.shift
  login $config['login']['username'], $config['login']['password']
  card_type = card_type_for(card_id)
  if card = @rally.find(card_type, :fetch => true) { equal :formatted_i_d, card_id}.first
    card.update(:owner => nil)
    puts "#{card_type} #{card_id} disowned"
  else
    puts "Couldn't find #{card_type} #{card_id}."
    exit 1
  end
when 'reset', 'complete', 'start'
  task_id = args.shift
  unless /^t[0-9]+/.match(task_id)
    puts "Invalid task id: #{task_id}.  Try t#{task_id}."
    exit 1
  end
  
  target_state = (
    case command
    when 'start' then "In-Progress"
    when 'complete' then "Completed"
    when 'reset' then "Defined"
    end
  )
  
  login $config['login']['username'], $config['login']['password']
  
  if task = @rally.find(:task, :fetch => true) { equal :formatted_i_d, task_id}.first
    task.update(:state => target_state)
    puts "Task #{task_id} state set to #{target_state}"
  else
    puts "Couldn't find task #{task_id}."
    exit 1
  end
when 'list'
  collection = args.shift
  login $config['login']['username'], $config['login']['password']
  if listable? collection
    puts @rally.find_all(collection).map {|i| "#{i.type}: #{i.name} | #{i.body}" }
    
  elsif collection == 'mytasks'
    tasks = @rally.find(:task, :fetch => true) do
      equal :owner, $config['login']['username']
      not_equal :state, 'Completed'
    end
    table = tasks.to_table([:project, :iteration, :formatted_i_d, :estimate, :actuals, :to_do, :state, :name])
    table.sort_rows_by!([:project, :iteration, :formatted_i_d])
    table.pretty_columns!
    puts table
  elsif collection == 'sprinttasks'
    $current_project = @rally.find(:project, :fetch => true) { equal :name, $config['current_project']}.first
    $current_iteration = @rally.find(:iteration, :fetch => true) { equal :name, $config['current_iteration']}.first
    tasks = @rally.find(:task, :fetch => true) do
      equal :owner, $config['login']['username']
      equal :project, $current_project
      equal :iteration, $current_iteration
    end
    table = tasks.to_table([:work_product, :formatted_i_d, :estimate, :actuals, :to_do, :state, :name])
    table.sort_rows_by!([:project, :iteration, :formatted_i_d])
    table.pretty_columns!
    puts "Project:   #{$current_project.name}"
    puts "Iteration: #{$current_iteration.name}"
    puts table
  elsif collection == 'projects'
    projects = @rally.find_all(:projects, :fetch => true)
    table = projects.to_table([:name])
    table.sort_rows_by!([:name])
    table.pretty_columns!
    puts table
  elsif collection == 'iterations'
    $current_project = @rally.find_all(:project, :fetch => true) { equal :name, $config['current_project']}.first
    puts "Project:   #{$current_project.name}"
    iterations = @rally.find(:iterations, :fetch => true) { equal :project, $current_project }
    table = iterations.to_table([:project, :name])
    table.sort_rows_by!([:project, :name])
    table.pretty_columns!
    puts table
  else
    raise "LIST: unrecognized list type. Got #{collection.inspect}, expected one of [#{RallyRestAPI::ALLOWED_TYPES * ', '}]"
  end
else
  raise "Unrecognized command: #{command}"
end


