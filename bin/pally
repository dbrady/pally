#!/usr/bin/env ruby
require 'rubygems'
require 'yaml'
require 'trollop'
require 'ruport'
require 'rally_rest_api'

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'common.rb'))

# usage:
# pally [options] command <args>

opts = Trollop.options do
  opt :config, "Configuration file", :default => nil
  opt :username, "Username", :default => nil
  opt :password, "Password", :default => nil
  opt :project, "Project", :default => nil
  opt :iteration, "Iteration", :default => nil
  opt :dump, "dump", :type => :boolean, :default => false
end
args = ARGV.dup

# ----------------------------------------------------------------------
# Config file
if opts[:config]
  $config_file = opts[:config]
else 
  f1 = File.expand_path('~/.pally/pally.yml')
  f2 = File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'pally.yml'))
  $config_file = File.exist?(f1) ? f1 : f2
end
raise "Config file does not exist: #{opts[:config]}" unless File.exists? $config_file
$config = YAML::load_file $config_file

[:username, :password].each do |arg|
  $config['login'][arg.to_s] = opts[arg] if opts[arg]
end

# ----------------------------------------------------------------------
# Crap that shouldn't even be in here but what ya gonna do
def login(username, password)
  @rally = RallyRestAPI.new :username => username, :password => password
end

def listable?(type)
  RallyRestAPI::ALLOWED_TYPES.include? type
end


# ----------------------------------------------------------------------
# Parse out command
command = args.shift
collection = args.shift

puts "COMMAND: #{command} #{collection}"
puts '-' * 80

case command.downcase
when 'list'
  login $config['login']['username'], $config['login']['password']
  if listable? collection
    puts @rally.find_all(collection).map {|i| "#{i.type}: #{i.name} | #{i.body}" }
    
  elsif collection == 'mytasks'
    tasks = @rally.find(:task, :fetch => true) do
      equal :owner, $config['login']['username']
      not_equal :state, 'Completed'
    end

    table = Table(["Project", "Iteration", "ID", "Est", "ToDo", "State", "Task"])
    tasks.each do |task|
      table << {
        "Project" => task.project,
        "Iteration" => (task.iteration ? task.iteration.name : ""),
        "ID" => task.formatted_i_d,
        "Est" => task.estimate,
        "ToDo" => task.to_do,
        "State" => task.state,
        "Task"  => task.name
      }
    end
    table.sort_rows_by!(["Project", "Iteration", "ID"])
    puts table
  else
    raise "LIST: unrecognized list type. Got #{collection.inspect}, expected one of [#{RallyRestAPI::ALLOWED_TYPES * ', '}]"
  end
else
  raise "Unrecognized command: #{command}"
end


